#!/usr/bin/python3
## \date 2023
## \author Tom Robinson
## \author Dana Singh
## \author Bennett Chang
## \description fremake is used to create and run a code checkout script and compile a model.

# import subprocess
# import os
# import yaml
# import argparse
# import logging
# import targetfre
# import varsfre
# import yamlfre
# import checkout
# import makefilefre
# import buildDocker
# import buildBaremetal
# from multiprocessing.dummy import Pool
import click

## Add in cli options
@click.command()
@click.argument('--yamlfile',
                '-y', 
                is_Flag = True, 
                type = str, help = 'Experiment yaml compile FILE')
@click.argument('--platform',
                '-p',
                is_Flag = True,
                nargs = '*',
                type = str, help = 'Hardware and software FRE platform space separated list of STRING(s). This sets platform-specific data and instructions') # missing nargs = '*'
# @click.argument('--target', '-t', is_Flag = True, type = str, help = 'FRE target space separated list of STRING(s) that defines compilation settings and linkage directives for experiments.\n\nPredefined targets refer to groups of directives that exist in the mkmf template file                          (referenced in buildDocker.py). Possible predefined targets include 'prod', 'openmp', 'repro', 'debug, 'hdf5'; however 'prod', 'repro', and 'debug' are mutually exclusive (cannot not                              use more than one of these in the target list). Any number of targets can be used.')
@click.option('--force-checkout',
              '-f',
              is_Flag = True,
              help = 'Force checkout to get a fresh checkout to source directory in case the source directory exists') # missing action = "store_true"
@click.option('--force-compile',
              '-F',
              is_Flag = True,
              help = 'Force compile to compile a fresh executable in case the executable directory exists')
@click.option('--keep-compiled'
              '-K',
              is_Flag = True,
              help = 'Keep compiled files in the executable directory for future use')
def fremake():
    pass

# You're good! This is testing my knowledge too, so the questions are welcome!
#  -y, -p, -t are required.  -n, -j, and -npc are good to have

#  Ah, gotcha, yeah,all for fremake. I've really only used fremake 
#  -y [yaml] -p [platform] -t [target] -n [num] -j [num] (sometimes -npc)

#  The main arguments I would definitely keep for now are -y, -p, -t, -n, -j, -npc, -s, and -v

if __name__ == '__main__':
    fremake()